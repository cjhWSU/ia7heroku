[{"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/index.js":"1","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/App.js":"2","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/LoginPage.js":"3","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/FeedPage.js":"4","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/RoundsPage.js":"5","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/NavBar.js":"6","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/CoursesPage.js":"7","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/ModeTabs.js":"8","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/AppMode.js":"9","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/BuddiesPage.js":"10","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/RoundsMode.js":"11","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/RoundForm.js":"12","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/FloatingButton.js":"13","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/RoundsTable.js":"14","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/SideMenu.js":"15","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/CreateAccount.js":"16","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/NotificationToast.js":"17","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/PopUpModal.js":"18"},{"size":237,"mtime":1635292263383,"results":"19","hashOfConfig":"20"},{"size":8098,"mtime":1635981188539,"results":"21","hashOfConfig":"20"},{"size":7441,"mtime":1635980465816,"results":"22","hashOfConfig":"20"},{"size":599,"mtime":1635292263381,"results":"23","hashOfConfig":"20"},{"size":4300,"mtime":1635982242671,"results":"24","hashOfConfig":"20"},{"size":1809,"mtime":1635980482549,"results":"25","hashOfConfig":"20"},{"size":604,"mtime":1635292263381,"results":"26","hashOfConfig":"20"},{"size":2070,"mtime":1635292263381,"results":"27","hashOfConfig":"20"},{"size":292,"mtime":1635292263381,"results":"28","hashOfConfig":"20"},{"size":604,"mtime":1635292263381,"results":"29","hashOfConfig":"20"},{"size":267,"mtime":1635292263382,"results":"30","hashOfConfig":"20"},{"size":8466,"mtime":1635980506307,"results":"31","hashOfConfig":"20"},{"size":452,"mtime":1635292263381,"results":"32","hashOfConfig":"20"},{"size":4341,"mtime":1635980540504,"results":"33","hashOfConfig":"20"},{"size":539,"mtime":1635980637514,"results":"34","hashOfConfig":"20"},{"size":14461,"mtime":1635974495085,"results":"35","hashOfConfig":"20"},{"size":400,"mtime":1635974595278,"results":"36","hashOfConfig":"20"},{"size":972,"mtime":1635982540114,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1nxwe7r",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/index.js",[],["80","81"],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/App.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/LoginPage.js",["82"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport AppMode from './AppMode.js'\nimport CreateAccount from './CreateAccount.js';\n\nclass LoginPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.emailError = React.createRef();\n        this.passwordError = React.createRef();\n        this.accountError = React.createRef();\n        this.email = React.createRef();\n        this.password = React.createRef();\n        this.state = {emailValid: true, \n                      passwordValid: true,\n                      accountValid: true,\n                      showCreateAccount: false,\n                      showAccountCreated: false,\n                      accountCreatedEmail: \"\"};\n    }\n\n    componentDidUpdate() {\n        if (this.state.showCreateAccount) {\n            return;\n        }\n        if (!this.state.accountValid) {\n            this.email.current.value = \"\";\n            this.password.current.value = \"\";\n            this.accountError.current.focus();\n        }\n        if (!this.state.passwordValid) {\n            this.password.current.value = \"\";\n            this.passwordError.current.focus();\n        }\n        if (!this.state.emailValid) {\n            this.email.current.value = \"\";\n            this.emailError.current.focus();\n        } \n    } \n\n    handleSubmit = (e) => {\n        e.preventDefault();\n         //Is the email field valid\n         const eValid = !this.email.current.validity.typeMismatch && \n                          !this.email.current.validity.valueMissing;\n         //Is the password field valid?\n         const pValid = !this.password.current.validity.patternMismatch && \n                            !this.password.current.validity.valueMissing;\n        //Is account valid?\n        const aValid = eValid && pValid && this.props.accountValid(this.email.current.value,this.password.current.value);\n        if (eValid && pValid && aValid) {\n            this.props.logInUser(this.email.current.value);\n        } else { //at least one field is invalid--trigger re-render\n            this.setState({emailValid: eValid,\n                           passwordValid: pValid,\n                           accountValid: aValid});\n        }\n    }\n\n    createAccountDone = (data) => {\n        this.props.createAccount(data);\n        this.setState({showCreateAccount: false,\n                       showAccountCreated: true,\n                        accountCreatedEmail: data.accountData.email});\n    }\n\n    createAccountCancel = () => {\n        this.setState({showCreateAccount: false});\n    }\n\n    renderErrorBox = () => {\n      return (\n        this.state.emailValid && this.state.passwordValid && this.state.accountValid ? null:\n          <p id=\"errorBox\" className=\"alert alert-danger centered\">\n            {!this.state.emailValid && \n                <a id=\"emailError\" href=\"#email\" \n                    className=\"alert-link\" \n                    ref={this.emailError}>\n                    Enter a valid email address<br/>\n                </a>\n            }\n            {!this.state.passwordValid &&\n              <a id=\"passwordError\" \n                href=\"#password\" \n                className=\"alert-link\" \n                ref={this.passwordError}>\n                Enter a valid password<br/>\n              </a>\n            }\n            {!this.state.accountValid && \n              <a id=\"accountError\" \n                href=\"#email\" \n                className=\"alert-link\" \n                ref={this.accountError}>\n                No account with that email and password exists. Re-enter credentials or create an account.\n              </a>\n            }\n          </p>\n      );\n    }\n       \n    render() {\n        return(this.state.showCreateAccount ?\n            <CreateAccount \n              createAccount = {this.props.createAccount}\n              accountExists = {this.props.accountExists}\n              accountValid = {this.props.accountValid}\n              createAccountDone = {this.createAccountDone} \n              createAccountCancel = {this.createAccountCancel}/> :\n            <div id=\"loginPage\" className=\"mode-page\">\n                <h1 className=\"mode-page-header\">Log In</h1>\n                {this.state.showAccountCreated && \n                  <div id=\"accountCreated\" className=\"toast-container\" \n                       role=\"alert\" aria-atomic=\"true\" aria-live=\"assertive\">\n                  <div className=\"toast-text\">\n                     {\"New account created with email \" + this.state.accountCreatedEmail + \".\"}\n                  </div>\n                    <button id=\"accountCreatedClose\" \n                            type=\"button\" \n                            className=\"btn-close toast-close\" \n                            aria-label=\"Close\"\n                            onClick={() => this.setState({showAccountCreated: false,\n                                                          accountCreatedEmail: \"\"})}>\n                           <span aria-hidden=\"true\">&times;</span>\n                    </button>\n                  </div>\n                }\n                {this.renderErrorBox()}\n                <form id=\"loginForm\" className=\"centered\" \n                    onSubmit={this.handleSubmit} noValidate>\n                    <div className=\"mb-3\">\n                    <label htmlFor=\"email\" className=\"form-label\">Email:<br/>\n                        <input id=\"email\" type=\"email\" className=\"form-control-lg centered\"\n                            aria-describedby=\"emailDescr\"\n                            ref={this.email} required/>\n                    </label>\n                    <div id=\"emailDescr\" className=\"form-text\">\n                        Enter a valid email address.\n                    </div>\n                    </div>\n                    <div className=\"mb-3\">\n                    <label htmlFor=\"password\" className=\"form-label\">Password:<br/>\n                        <input id=\"password\" type=\"password\" className=\"form-control-lg centered\"\n                            pattern=\"^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$\"\n                            aria-describedby=\"passwordDescr\"\n                            ref={this.password} required />\n                    </label>\n                    <div id=\"passwordDescr\" className=\"form-text\">\n                        Passwords must be at least 8 characters long with at least one number, \n                        one lower case letter, and one upper case letter.\n                    </div>\n                    </div>\n                <p></p>\n                <button type=\"submit\" id=\"loginBtn\" \n                        className=\"btn btn-primary fm-primary-btn\">\n                    <FontAwesomeIcon icon=\"sign-in-alt\"/>\n                        &nbsp;Log In\n                </button>\n                </form>\n                <ul className=\"nav justify-content-center\">\n                <li className=\"nav-item\">\n                    <button id=\"createAccountBtn\" className=\"nav-link btn btn-link\"\n                     onClick={() => this.setState({showCreateAccount: true})}>\n                        Create Account\n                    </button>\n                </li>\n                <li className=\"nav-item\">\n                    <button id=\"resetPasswordBtn\" className=\"nav-link btn btn-link\">Reset Password</button>\n                </li>\n                </ul>\n            </div>  \n        )\n    }\n}\n\nexport default LoginPage;","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/FeedPage.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/RoundsPage.js",["83","84"],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/NavBar.js",["85","86","87"],"import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport logo from '../images/sslogo.png'\nimport App from './App';\nimport AppMode from './AppMode';\n\n\nclass NavBar extends React.Component {\n    \n    render() {\n       return (\n        <header className=\"navbar\">  \n        <a id=\"sLink\" className=\"skip-link\" tabIndex=\"0\">\n         Skip to content</a>\n         {this.props.mode != AppMode.LOGIN && !this.props.modalOpen ?\n         <button id=\"menuBtn\" type=\"button\" className=\"navbar-btn\" \n            title=\"Menu\" aria-controls=\"sideMenu\" \n            aria-label=\"Actions\" aria-haspopup=\"true\" \n            aria-expanded={this.props.menuOpen ? \"true\" : \"false\"}\n            onClick={this.props.toggleMenuOpen}>\n            <FontAwesomeIcon \n              icon={this.props.menuOpen ? \"times\" : \"bars\"}\n              className=\"navbar-btn-icon\"/>\n          </button> : null }\n          <img src={logo} className=\"navbar-app-icon\" \n            alt=\"SpeedScore logo\" />\n           <h1 id=\"appName\" className=\"navbar-title\">SpeedScore</h1> \n           <div className=\"navbar-right-items\">\n                <input id=\"searchBox\" className=\"form-control hidden\" \n                aria-label=\"Search Rounds\" size=\"30\"\n                type=\"search\" />\n                <button id=\"searchBtn\" type=\"button\" className=\"navbar-btn hidden\" \n                    aria-label=\"Open Rounds Search\">\n                    <FontAwesomeIcon icon=\"search\" className=\"navbar-btn-icon\"/>\n                </button>\n                <button id=\"profileBtn\" type=\"button\" \n                  className=\"navbar-btn navbar-profile-btn hidden\" \n                  aria-label=\"Account and Profile Settings\">\n                </button> \n            </div>\n      </header>\n    ); \n  }\n}\n\nexport default NavBar;","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/CoursesPage.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/ModeTabs.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/AppMode.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/BuddiesPage.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/RoundsMode.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/RoundForm.js",["88","89","90"],"import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport React from 'react';\nimport RoundsMode  from './RoundsMode.js';\n\n\nclass RoundForm extends React.Component {\n\n    constructor(props) {\n        super(props);\n        if (this.props.mode === RoundsMode.LOGROUND) {\n            let today = new Date(Date.now()-(new Date()).getTimezoneOffset()*60000);\n            this.state = {date:  today.toISOString().substr(0,10), \n                        course: \"\",\n                        type: \"practice\",\n                        holes: \"18\",\n                        strokes: 80,\n                        minutes: 60,\n                        seconds: \"00\",\n                        SGS:\"140:00\",\n                        notes: \"\",\n                        btnIcon: \"calendar\",\n                        btnLabel: \"Log Round\"};\n        } else { \n            this.state = this.props.roundData;\n            this.state.btnIcon = \"edit\";\n            this.state.btnLabel = \"Update Round\";\n        }\n    }\n\n    computeSGS = (strokes, min, sec) => {\n        return (Number(strokes) + Number(min)) \n                    + \":\" + sec;\n        }  \n     \n    handleChange = (event) => {\n        const name = event.target.name;\n        if (name === \"seconds\") {\n            const newSec = (event.target.value.length < 2 ? \"0\" + \n            event.target.value : event.target.value);\n            const newSGS = this.computeSGS(this.state.strokes, this.state.minutes, \n                                        newSec);\n            this.setState({seconds: newSec, SGS: newSGS});\n        } else if (name === \"strokes\") {\n            const newStrokes = event.target.value;\n            const newSGS = this.computeSGS(newStrokes, this.state.minutes, \n            this.state.seconds);\n            this.setState({strokes: newStrokes, SGS: newSGS});\n        } else if (name === \"minutes\") {\n            const newMin = event.target.value;\n            const newSGS = this.computeSGS(this.state.strokes, newMin, \n                this.state.seconds);\n            this.setState({minutes: newMin, SGS: newSGS});\n        } else {\n            this.setState({[name]: event.target.value});\n        }\n    }\n  \n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.setState({btnIcon: \"spinner\", btnLabel: \"Saving...\"});\n        setTimeout(this.handleSubmitCallback,1000);\n    }\n\n    handleSubmitCallback = () => {\n        const newRound = {...this.state};\n        delete newRound.btnIcon;\n        delete newRound.btnLabel;\n        this.props.saveRound(newRound);\n        this.props.toggleModalOpen();\n        this.props.setMode(RoundsMode.ROUNDSTABLE);\n    }\n    \n    render() {\n        return (\n          <div id=\"roundsModeDialog\" \n                className=\"mode-page action-dialog\" role=\"dialog\" \n                aria-modal=\"true\" aria-labelledby=\"roundFormHeader\" tabIndex=\"0\">\n            <h1 id=\"roundFormHeader\" className=\"mode-page-header\">\n                {this.props.mode==RoundsMode.LOGROUND ? \"Log Round\" : \"Edit Round\"}\n            </h1>\n            <form id=\"logRoundForm\" \n                  onSubmit={this.handleSubmit} noValidate>\n              <div className=\"mb-3 centered\">\n                <label htmlFor=\"roundDate\" className=\"form-label\">Date:\n                    <input id=\"roundDate\" name=\"date\"  \n                    className=\"form-control centered\" type=\"date\" \n                    aria-describedby=\"roundDateDescr\" value={this.state.date} \n                    onChange={this.handleChange} required/>\n                </label>\n                <div id=\"roundDateDescr\" className=\"form-text\">\n                Enter a valid date\n                </div>\n              </div>\n              <div className=\"mb-3 centered\">\n                <label htmlFor=\"roundCourse\" className=\"form-label\">Course:\n                    <input id=\"roundCourse\" name=\"course\" \n                        className=\"form-control centered\" type=\"text\" \n                        aria-describedby=\"roundCourseDescr\"\n                        size=\"50\" maxLength=\"50\"  value={this.state.course} \n                        onChange={this.handleChange} required />\n                </label>\n                <div id=\"roundCourseDescr\" className=\"form-text\">\n                Enter a course name of at most 50 characters\n                </div>\n              </div>\n              <div className=\"mb-3 centered\">\n                <label htmlFor=\"roundType\">Type:\n                <select id=\"roundType\" name=\"type\" id=\"roundType\" className=\"form-control centered\"\n                        value={this.state.type} onChange={this.handleChange}>\n                    <option value=\"practice\">Practice</option>\n                    <option value=\"tournament\">Tournament</option>\n                </select> \n                </label>\n              </div>\n              <div className=\"mb-3 centered\">\n                <label htmlFor=\"roundHoles\">Holes:\n                  <select id=\"roundHoles\" name=\"holes\" \n                    className=\"form-control centered\" value={this.state.holes} onChange={this.handleChange}>\n                    <option value=\"9\">9</option>\n                    <option value=\"18\">18</option>\n                  </select> \n                </label>\n              </div>\n              <div className=\"mb-3 centered\">\n              <label htmlFor=\"roundStrokes\">Strokes:\n                <input id=\"roundStrokes\" name=\"strokes\" className=\"form-control centered\" type=\"number\" \n                      min=\"9\" max=\"200\" value={this.state.strokes} aria-describedby=\"roundStrokesDescr\"\n                      onChange={this.handleChange} required/>\n                </label>\n                <div id=\"roundStrokesDescr\" className=\"form-text\">\n                Enter a strokes value between 9 and 200\n                </div>\n              </div>\n              <div className=\"mb-3 centered\">\n                <label htmlFor=\"roundMinutes\">Time:\n                  <input id=\"roundMinutes\" name=\"minutes\" type=\"number\" size=\"3\"\n                    aria-describedby=\"roundTimeDescr\"\n                    min=\"10\" max=\"400\" value={this.state.minutes} style={{textAlign: \"right\"}}\n                    onChange={this.handleChange} required/> : \n                  <input id=\"roundSeconds\" name=\"seconds\" type=\"number\" size=\"2\"\n                    aria-describedby=\"roundTimeDescr\"\n                    min=\"0\" max=\"60\" value={this.state.seconds} onChange={this.handleChange}\n                    required/>\n                </label>\n                <div id=\"roundTimeDescr\" className=\"form-text\">\n                Enter a minutes value between 10 and 400, and a seconds value between 0 and 59\n                </div>\n              </div>\n              <div className=\"mb-3 centered\">\n                <label htmlFor=\"roundSGS\">Speedgolf Score:\n                <input name=\"SGS\" className=\"form-control centered\" type=\"text\" \n                    size=\"6\" value={this.state.SGS} readOnly={true}/>\n                </label>\n              </div>\n              <div className=\"mb-3 centered\">\n                <label htmlFor=\"roundNotes\">Notes:\n                  <textarea name=\"notes\" id=\"roundNotes\" className=\"form-control centered\" \n                    aria-describedby=\"roundNotesDescr\"\n                    rows=\"6\" cols=\"75\" maxLength=\"500\"\n                    value={this.state.notes} onChange={this.handleChange}>\n                  </textarea>\n                </label>\n                <div id=\"roundNotesDescr\" className=\"form-text\">\n                  Enter optional round notes of up to 500 characters\n                </div>\n              </div>\n              <div className=\"mode-page-btn-container\">\n                <button type=\"submit\" className=\"mode-page-btn action-dialog action-button\">\n                    <FontAwesomeIcon icon={this.state.btnIcon}  className={this.state.btnIcon == \"spinner\" ? \"fa-spin\" : \"\"}/>\n                    <span>&nbsp;{this.state.btnLabel}</span>\n                </button>\n                <button type=\"button\" \n                        className=\"mode-page-btn-cancel action-dialog cancel-button\"\n                        onClick={() => {this.props.setMode(RoundsMode.ROUNDSTABLE);\n                                        this.props.toggleModalOpen();}}>\n                  <FontAwesomeIcon icon=\"window-close\"/>\n                  <span>&nbsp;Cancel</span>\n                </button>\n            </div>\n          </form>\n        </div>\n      );\n    }\n  \n}\n\nexport default RoundForm;","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/FloatingButton.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/RoundsTable.js",["91"],"import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nclass RoundsTable extends React.Component {\n  renderTable = () => {\n    const table = [];\n    for (let r = 0; r < this.props.rounds.length; ++r) {\n      if (this.props.rounds[r] == null){\n        continue;\n      }\n      const thisRoundNum = this.props.rounds[r].roundNum;\n      table.push(\n        <tr key={thisRoundNum.toString()}>\n          <td>{this.props.rounds[r].date}</td>\n          <td>{this.props.rounds[r].course}</td>\n          <td>\n            {Number(this.props.rounds[r].strokes) +\n              Number(this.props.rounds[r].minutes) +\n              \":\" +\n              this.props.rounds[r].seconds +\n              \" (\" +\n              this.props.rounds[r].strokes +\n              \" in \" +\n              this.props.rounds[r].minutes +\n              \":\" +\n              this.props.rounds[r].seconds +\n              \")\"}\n          </td>\n          <td>\n            <button\n              onClick={\n                this.props.menuOpen\n                  ? null\n                  : () => this.props.initiateEditRound(thisRoundNum)\n              }\n            >\n              <FontAwesomeIcon icon=\"eye\" />\n              <FontAwesomeIcon icon=\"edit\" />\n            </button>\n          </td>\n          <td>\n            <button\n              onClick={\n                this.props.menuOpen\n                  ? null\n                  : () => this.props.initiateDeleteRound(thisRoundNum)\n              }\n            >\n              <FontAwesomeIcon icon=\"trash\" />\n            </button>\n          </td>\n        </tr>\n      );\n    }\n    return table;\n  };\n\n  render() {\n    return (\n      <div\n        id=\"roundsModeTab\"\n        className=\"mode-page\"\n        role=\"tabpanel\"\n        aria-label=\"Rounds Tab\"\n        tabIndex=\"0\"\n      >\n        <h1 className=\"mode-page-header\">Rounds</h1>\n        <table id=\"roundsTable\" className=\"table table-hover caption-top\">\n          <caption id=\"roundsTableCaption\" aria-live=\"polite\">\n            {\"Table displaying \" +\n              this.props.rounds.length +\n              \" speedgolf round\" +\n              (this.props.rounds.length !== 1 ? \"s\" : \"\")}\n          </caption>\n          <thead className=\"table-light\">\n            <tr>\n              <th\n                scope=\"col\"\n                role=\"columnheader\"\n                className=\"sortable-header cell-align-middle\"\n                aria-sort=\"none\"\n              >\n                <button\n                  className=\"btn bg-transparent table-sort-btn\"\n                  aria-label=\"Sort ascending by date\"\n                >\n                  <FontAwesomeIcon icon=\"sort\" />\n                </button>\n                Date\n              </th>\n              <th\n                scope=\"col\"\n                role=\"columnheader\"\n                className=\"sortable-header cell-align-middle\"\n                aria-sort=\"none\"\n              >\n                <button\n                  className=\"btn bg-transparent table-sort-btn\"\n                  aria-label=\"Sort ascending by course\"\n                >\n                  <FontAwesomeIcon icon=\"sort\" />\n                </button>\n                Course\n              </th>\n              <th\n                scope=\"col\"\n                role=\"columnheader\"\n                className=\"sortable-header cell-align-middle\"\n                aria-sort=\"none\"\n              >\n                <button\n                  className=\"btn bg-transparent table-sort-btn\"\n                  aria-label=\"Sort ascending by score\"\n                >\n                  <FontAwesomeIcon icon=\"sort\" />\n                </button>\n                Score\n              </th>\n              <th scope=\"col\" className=\"cell-align-middle\">\n                View/Edit...\n              </th>\n              <th scope=\"col\" className=\"cell-align-middle\">\n                Delete\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.rounds === null || this.props.rounds.length === 0 ? (\n              <tr>\n                <td colSpan=\"5\" scope=\"rowgroup\">\n                  <i>No rounds logged</i>\n                </td>\n              </tr>\n            ) : (\n              this.renderTable()\n            )}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default RoundsTable;","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/SideMenu.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/CreateAccount.js",["92","93","94"],"import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport profilePic from './../images/DefaultProfilePic.jpg'\n\nclass CreateAccount extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n                      email: \"\",\n                      password: \"\",\n                      repeatPassword: \"\",\n                      displayName: \"\",\n                      profilePic: \"\",\n                      securityQuestion: \"\",\n                      securityAnswer: \"\",\n                      emailValid: true,\n                      passwordValid: true,\n                      repeatPasswordValid: true,\n                      securityQuestionValid: true,\n                      securityAnswerValid: true,\n                      accountValid: true\n                    };\n        this.formSubmitted = false;\n        this.accountError = React.createRef();\n        this.emailError = React.createRef();\n        this.passwordError = React.createRef();\n        this.repeatPasswordError = React.createRef();\n        this.securityQuestionError = React.createRef();\n        this.securityAnswerError = React.createRef();\n    }\n\n   componentDidUpdate() {\n        if (this.formSubmitted) {\n          if (!this.state.securityAnswerValid) {\n              this.securityAnswerError.current.focus();\n          }\n          if (!this.state.securityQuestionValid) {\n              this.securityQuestionError.current.focus();\n          }\n          if (!this.state.repeatPasswordValid) {\n              this.repeatPasswordError.current.focus();\n          }\n          if (!this.state.passwordValid) {\n              this.passwordError.current.focus();\n          }\n          if (!this.state.accountValid) {\n              this.accountError.current.focus();\n          } \n          if (!this.state.emailValid) {\n              this.emailError.current.focus();\n          } \n          this.formSubmitted = false;\n        }\n    }\n\n    emailIsValid = (email) => {\n        const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        return re.test(String(email).toLowerCase());\n    }\n\n    passwordIsValid = (pass) => {\n        const re = /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/;\n        return re.test(String(pass));\n    }\n\n    handleChange = (event) => {\n      if (event.target.name !== \"profilePic\") {\n        this.setState({[event.target.name]: event.target.value});\n        return;\n      } \n      if (event.target.value.length == 0) {\n        this.setState({profilePic: \"\"});\n      } else {\n        const self = this;\n        const reader = new FileReader();\n        reader.readAsDataURL(event.target.files[0]);\n        reader.addEventListener(\"load\",function() {\n            self.setState({profilePic: this.result});\n        });\n      }    \n    }\n\n    setDefaultDisplayName = (event) => {\n      if (event.target.value.length > 0 && this.state.displayName === \"\") {\n        this.setState({displayName: event.target.value});\n      }\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        //Are fields valid?\n        const eValid = this.emailIsValid(this.state.email);\n        const pValid = this.passwordIsValid(this.state.password);\n        const rpValid = (this.state.password === this.state.repeatPassword);\n        const sqValid = (this.state.securityQuestion.length > 0);\n        const saValid = (this.state.securityAnswer.length > 0);\n        const acctAvail = (!eValid || !this.props.accountExists(this.state.email));\n        if (eValid && pValid && rpValid && sqValid && saValid && acctAvail) { \n            //All fields valid: create account\n            const newAccount = {\n                accountData: {\n                    email: this.state.email,\n                    password: this.state.password,\n                    securityQuestion: this.state.securityQuestion,\n                    securityAnswer: this.state.securityAnswer\n                },\n                identityData: {\n                    displayName: (this.state.displayName !== \"\" ? this.state.displayName : this.state.email),\n                    profilePic: this.state.profilePic\n                },\n                speedgolfData: {\n                    bio: \"\",\n                    homeCourse: \"\",\n                    firstRound: \"\",\n                    personalBest: {strokes: \"\",minutes: \"\", seconds: \"\", course: \"\"},\n                    clubs: {},\n                    clubComments: \"\"\n                },\n                rounds: [],\n                roundCount: 0\n            };\n            this.props.createAccountDone(newAccount);\n        } else { //At least one field invalid\n                 //Clear out invalid fields and display errors\n            const eVal = (!eValid ? \"\" : this.state.email);\n            const pVal = (!pValid ? \"\" : this.state.password);\n            const rpVal = (!rpValid ? \"\" : this.state.repeatPassword);\n            const dnVal = (this.state.displayName !== \"\" ? this.state.displayName : this.state.email);\n            this.formSubmitted = true; //Ensures error message gets focus\n            this.setState({email: eVal,\n                           password: pVal,\n                           repeatPassword: rpVal,\n                           displayName: dnVal,\n                           emailValid: eValid,\n                           passwordValid: pValid,\n                           repeatPasswordValid: rpValid,\n                           securityQuestionValid: sqValid,\n                           securityAnswerValid: saValid,\n                           accountValid: acctAvail});\n        }\n    }\n\n    renderErrorBox = () => {\n        if (this.state.emailValid && this.state.passwordValid &&\n            this.state.repeatPasswordValid && this.state.securityQuestionValid &&\n            this.state.securityAnswerValid) {\n            return null;\n        }\n        return (\n        <p id=\"errorBox\" className=\"alert alert-danger centered\">\n          {!this.state.emailValid && \n            <a id=\"emailError\" href=\"#email\" \n                className=\"alert-link\" \n                ref={this.emailError}>\n                Enter a valid email address<br/>\n            </a>\n          }\n          {!this.state.accountValid && \n            <a id=\"accountError\" href=\"#email\" \n                className=\"alert-link\" \n                ref={this.accountError}>\n                Account with that email already exists. Choose a different email address or reset password.<br/>\n            </a>\n          }\n          {!this.state.passwordValid && \n            <a id=\"passwordError\" href=\"#password\" \n                className=\"alert-link\" \n                ref={this.passwordError}>\n                Enter a valid password<br/>\n            </a>\n          }\n          {!this.state.repeatPasswordValid && \n            <a id=\"repeatPasswordError\" href=\"#repeatPassword\" \n                className=\"alert-link\" \n                ref={this.repeatPasswordError}>\n                Make sure repeated password matches original password<br/>\n            </a>\n          }\n           {!this.state.securityQuestionValid && \n            <a id=\"securityQuestionError\" href=\"#securityQuestion\" \n                className=\"alert-link\" \n                ref={this.securityQuestionError}>\n                Enter a security question<br/>\n            </a>\n          }\n          {!this.state.securityAnswerValid && \n            <a id=\"securityAnswerError\" href=\"#securityError\" \n                className=\"alert-link\" \n                ref={this.securityAnswerError}>\n                Enter a security answer<br/>\n            </a>\n          }\n        </p>\n        );\n    }\n\n    render() {\n        return (\n          <div className=\"mode-page action-dialog\" role=\"dialog\" \n            aria-modal=\"true\" aria-labelledby=\"createAccountHeader\" tabIndex=\"0\">\n            <h1 id=\"createAccountHeader\" className=\"mode-page-header\">\n              Create Account\n            </h1>\n            {this.renderErrorBox()}\n            <form onSubmit={this.handleSubmit} noValidate>\n              <div className=\"mb-3 centered\">\n              <label htmlFor=\"email\" className=\"form-label\">\n                Email: \n                <input id=\"email\"\n                    value={this.state.email}\n                    onChange={this.handleChange}\n                    onBlur={this.setDefaultDisplayName}\n                    className=\"form-control centered\"\n                    name=\"email\"\n                    type=\"email\"\n                    size=\"35\"\n                    aria-describedby=\"emailDescr\"\n                />\n              </label>\n              <div id=\"emailDescr\" className=\"form-text\">\n                Enter a valid email address\n                </div>\n              </div>\n              <div className=\"mb-3 centered\">\n              <label htmlFor=\"password\" className=\"form-label\">\n                Password:\n                <input id=\"password\"\n                    ref={this.password}\n                    value={this.state.password}\n                    onChange={this.handleChange}\n                    className=\"form-control centered\"\n                    name=\"password\"\n                    type=\"password\"\n                    size=\"35\"\n                    aria-describedby=\"passwordDescr\"\n                />\n              </label>  \n              <div id=\"passwordDescr\" className=\"form-text\">\n                Password must be at least eight characters with at least one upper case letter, one upper case letter, and one number\n                </div>\n              </div>\n              <div className=\"mb-3 centered\">\n              <label htmlFor=\"repeatPassword\" className=\"form-label\">\n                Repeat Password:\n                <input id=\"repeatPassword\"\n                    value={this.state.repeatPassword}\n                    onChange={this.handleChange}\n                    className=\"form-control centered\"\n                    name=\"repeatPassword\"\n                    type=\"password\"\n                    size=\"35\"\n                    aria-describedby=\"repeatPasswordDescr\"\n                />\n              </label>\n              <div id=\"repeatPasswordDescr\" className=\"form-text\">\n                Repeated password must exactly match original password\n              </div>\n              </div>\n              <div className=\"mb-3 centered\">\n              <label htmlFor=\"displayName\" className=\"form-label\">\n                Display Name:\n                <input id=\"displayName\"\n                    value={this.state.displayName}\n                    onChange={this.handleChange}\n                    className=\"form-control centered\"\n                    name=\"displayName\"\n                    type=\"text\"\n                    size=\"35\"\n                    aria-describedby=\"displayNameDescr\"\n                />\n              </label>\n              <div id=\"displayNameDescr\" className=\"form-text\">\n                Your name within the app (defaults to your email)\n              </div>\n              </div>\n              <div className=\"mb-3 centered\">\n              <label htmlFor=\"profilePic\" className=\"form-label\">\n                Profile Picture:<br/>\n                <img id=\"acctProfilePicImage\" \n                     src={this.state.profilePic == \"\" ? profilePic :\n                          this.state.profilePic} \n                    className=\"fm-profile-pic\" height=\"46\" width=\"auto\"/>\n                <input id=\"profilePic\"\n                   \n                    onChange={this.handleChange}\n                    className=\"form-control centered\"\n                    name=\"profilePic\"\n                    type=\"file\"\n                    accept=\".png, .gif, .jpg\"\n                    aria-describedby=\"profilePicDescr\"\n                />\n              </label>\n              <div id=\"profilePicDescr\" className=\"form-text\">\n                A profile picture that represents you in the app (defaults to a generic picture)\n              </div>\n              </div>\n              <div className=\"mb-3 centered\">\n              <label htmlFor=\"securityQuestion\" className=\"form-label\">\n                Security Question:\n                <textarea id=\"securityQuestion\"\n                    ref={this.securityQuestion}\n                    value={this.state.securityQuestion}\n                    onChange={this.handleChange}\n                    className=\"form-control centered\"\n                    name=\"securityQuestion\"\n                    size=\"35\"\n                    rows=\"2\"\n                    cols=\"35\"\n                    maxLength=\"100\"\n                    aria-describedby=\"securityQuestionDescr\"\n                />\n              </label>\n              <div id=\"securityQuestionDescr\" className=\"form-text\">\n                Enter a question whose answer you can easily remember\n              </div>\n              </div>\n              <div className=\"mb-3 centered\">\n              <label htmlFor=\"securityAnswer\" className=\"form-label\">\n                Answer to Security Question:\n                <textarea id=\"securityAnswer\"\n                    ref={this.securityAnswer}\n                    value={this.state.securityAnswer}\n                    onChange={this.handleChange}\n                    className=\"form-control centered\"\n                    name=\"securityAnswer\"\n                    type=\"text\"\n                    rows=\"2\"\n                    cols=\"35\"\n                    maxLength=\"100\"\n                    aria-describedby=\"securityAnswerDescr\"\n                    required={true}\n                />\n              </label>\n              <div id=\"securityAnswerDescr\" className=\"form-text\">\n                Enter an easily remembered answer to the security question\n              </div>\n              </div>\n              <div className=\"mode-page-btn-container\">\n                <button type=\"submit\" className=\"mode-page-btn action-dialog action-button\">\n                    <FontAwesomeIcon icon=\"user-plus\"/>\n                    &nbsp;Create Account\n                </button>\n                <button type=\"button\" \n                        className=\"mode-page-btn-cancel action-dialog cancel-button\"\n                        onClick={this.props.createAccountCancel}>\n                  <FontAwesomeIcon icon=\"window-close\"/>&nbsp;Cancel\n                </button>\n              </div>\n            </form>\n        </div>\n        );\n    }   \n}\n\nexport default CreateAccount;","/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/NotificationToast.js",[],"/Users/cjacobh/Documents/hwCode/ia7/ia7-cjhWSU/src/components/PopUpModal.js",[],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":3,"column":8,"nodeType":"101","messageId":"102","endLine":3,"endColumn":15},{"ruleId":"99","severity":1,"message":"103","line":2,"column":10,"nodeType":"101","messageId":"102","endLine":2,"endColumn":25},{"ruleId":"104","severity":1,"message":"105","line":53,"column":9,"nodeType":"106","messageId":"107","endLine":107,"endColumn":10},{"ruleId":"99","severity":1,"message":"108","line":4,"column":8,"nodeType":"101","messageId":"102","endLine":4,"endColumn":11},{"ruleId":"109","severity":1,"message":"110","line":13,"column":9,"nodeType":"111","endLine":13,"endColumn":58},{"ruleId":"112","severity":1,"message":"113","line":15,"column":27,"nodeType":"114","messageId":"115","endLine":15,"endColumn":29},{"ruleId":"112","severity":1,"message":"116","line":80,"column":33,"nodeType":"114","messageId":"115","endLine":80,"endColumn":35},{"ruleId":"117","severity":1,"message":"118","line":109,"column":52,"nodeType":"119","messageId":"120","endLine":109,"endColumn":66},{"ruleId":"112","severity":1,"message":"116","line":170,"column":95,"nodeType":"114","messageId":"115","endLine":170,"endColumn":97},{"ruleId":"121","severity":1,"message":"122","line":130,"column":33,"nodeType":"119","endLine":130,"endColumn":49},{"ruleId":"112","severity":1,"message":"116","line":72,"column":37,"nodeType":"114","messageId":"115","endLine":72,"endColumn":39},{"ruleId":"123","severity":1,"message":"124","line":280,"column":17,"nodeType":"111","endLine":283,"endColumn":74},{"ruleId":"112","severity":1,"message":"116","line":281,"column":49,"nodeType":"114","messageId":"115","endLine":281,"endColumn":51},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'AppMode' is defined but never used.","Identifier","unusedVar","'FontAwesomeIcon' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'App' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","jsx-a11y/scope","The scope prop can only be used on <th> elements.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation"]